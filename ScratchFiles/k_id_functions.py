#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 24 22:44:24 2022

@author: abhijeet

Purpose:
To define "k-id" functions in a new and more robust way    
x0 and y0 are the top left point of tile "h23v05"
"""
import numpy

def check_num_length(num):
    """
    Parameters
    ----------
    num : int
        Any integer number
    Returns
    -------
    Returns the length of num in int form
    """
    if isinstance(num, int):
        length = 0
        while num >0:
            num //=10
            length +=1
        return length
    
def _num_to_divide_with(id_length=8):
    """
    Parameters
    ----------
    id_length : int
        Length of k_id, default=12
    Returns
    -------
    Returns mutiple of 10 of type int, used while extracting x,y embedding from k_id
    """
    num = 1
    count = 0

    while count < id_length//2:
        num *= 10
        count +=1
        
    return num

@numpy.vectorize
def k_id_generator(x,y,x0=57.7350269122104,y0=39.9999999964079,x_grid_len=47,y_grid_len=42,x_grid_interval=1/100, y_grid_interval=1/100,id_length = 8):
    """
    
    Parameters
    ----------
    x : float/int
        X-coordinate or longitude of the point for which k_id is required.
    y : float/int
        Y-coordinate or longitude of the point for which k_id is required.
    x0 : float/int
        As per convention, x0 should be the top left x-coordinate of the grid
    y0 : float/int
        As per convention, y0 should be the top left y-coordinate of the grid.
    x_grid_len : float/int
        Overall length of the grid in x-direction,default=30 degrees
    y_grid_len : float/int
        Overall length of the grid in y-direction,default=32 degrees
    x_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    y_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    id_length : int
        Length of k_id, default = 12
    Returns
    -------
    The grid corresponding k_id for the point (x,y)

    """
    xv = numpy.int64(numpy.round(x/x_grid_interval))
    yv = numpy.int64(numpy.round(y/y_grid_interval))
    zlen = id_length//2
    k_id = numpy.int64(str(xv) + str(yv).zfill(zlen))
    
    return k_id
    
    
def xy_id_from_k_id(k_id,id_length=8):
    """
    
    Parameters
    ----------
    k_id : int
        A unique ID describing a m X n space on map.
    id_length : int
        Length of k_id, default=10
    Returns
    -------
    Returns Column and Row number embedded in the k_id

    """
    x_id = 0
    y_id = 0
    count = 0
    y_tens = 1
    x_tens = 1
    while count < id_length:
        if count < id_length//2:
            y_id += y_tens*(k_id%10)
            k_id //=10
            y_tens*=10 
        elif count >= (id_length//2):
            x_id += x_tens*(k_id%10)
            k_id //=10
            x_tens*=10
        count+=1  
    return x_id, y_id

def bound_box_k_id(k_id,x0=57.7350269122104,y0=39.9999999964079,x_grid_len=47,y_grid_len=42,x_grid_interval=1/100, y_grid_interval=1/100):
    """
    Parameters
    ----------
    k_id : int
        A unique ID describing a m X n space on map.
    x_grid_len : float/int
        Overall length of the grid in x-direction,default=30 degrees
    y_grid_len : float/int
        Overall length of the grid in y-direction,default=32 degrees
    x_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    y_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    id_length : int
        Length of k_id, default = 12
    -------
    Returns x1,x2,y1,y2 the bounding box generated by the given k_id
    Returns None if k_id is invalid
    """
    x1 = xy_id_from_k_id(k_id)[0]*x_grid_interval - 0.5*x_grid_interval
    x2 = x1 + x_grid_interval
    y1 = xy_id_from_k_id(k_id)[1]*y_grid_interval - 0.5*y_grid_interval
    y2 = y1 + y_grid_interval
    
    return x1, x2, y1, y2


# def lon_lat_from_origin_and_k_id(k_id, x0=57.7350269122104,y0=39.9999999964079, x_grid_len=30,y_grid_len=32,x_grid_interval=1/10000, y_grid_interval=1/10000):

def lat_lon_k_id(k_id, x0=57.7350269122104,y0=39.9999999964079, x_grid_len=47,y_grid_len=42,x_grid_interval=1/100, y_grid_interval=1/100):

    """
    
    Parameters
    
    ----------
    x0 : float/int
        As per convention, x0 should be the top left x-coordinate of the grid
    y0 : float/int
        As per convention, y0 should be the top left y-coordinate of the grid.
    k_id : int
        A unique ID describing a m X n space on map.

    Returns
    -------
    Longitude and Latitude(if origin used is longitude and latitude)

    """
    lon = xy_id_from_k_id(k_id)[0]*x_grid_interval
    lat = xy_id_from_k_id(k_id)[1]*y_grid_interval
    return lon, lat

def check_xy_in_bbox(x,y,k_id,x0=57.7350269122104,y0=39.9999999964079,x_grid_len=47,y_grid_len=42,x_grid_interval=1/100, y_grid_interval=1/100):
    """
    
    Parameters
    ----------
    x : float/int
        X-coordinate or longitude of the point for which k_id is required.
    y : float/int
        Y-coordinate or longitude of the point for which k_id is required.
    k_id : int
        A unique ID describing a m X n space on map.
    x_grid_len : float/int
        Overall length of the grid in x-direction,default=30 degrees
    y_grid_len : float/int
        Overall length of the grid in y-direction,default=32 degrees
    x_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    y_grid_interval : float/int
        Grid interval for X-coordinate, default = 1/10000 degrees
    id_length : int
        Length of k_id, default = 12
    Returns
    -------
    None.

    """
    x1,x2,y1,y2 = bound_box_k_id(k_id)
    
    if x1 <= x < x2 and y1 <= y < y2:
        return True
    return False


    
    

    
    
